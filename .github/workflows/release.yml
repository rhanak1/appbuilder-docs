name: Release
on:
  workflow_dispatch:
    inputs:
      outlines:
        description: 'Comma-separated list of outlines to generate PDFs for (leave blank for all)'
        required: false
        default: ''
      logLevel:
        description: "Log level"
        required: false
        default: "warning"
jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: lts/*
          
      - name: Install dependencies
        run: yarn

      - name: Set outlines variable
        id: outlines
        run: |
          if [ -z "${{ github.event.inputs.outlines }}" ]; then                  #Generate pdfs for all outlines if none provided
            echo "outlines=SAB-Installation-Instructions,SAB-Building-Apps,SAB-Installing-and-Building-Apps-on-a-Mac,SAB-App-Publishing-Checklist,SAB-Distributing-Apps,SAB-Using-Audacity-for-Audio-Text-Synchronization,SAB-Using-HearThis-for-Audio-Recording,SAB-Running-Workshops,SAB-AppStore-Optimization,SAB-Creating-Apps-with-Quizzes,SAB-Creating-Slideshow-Videos,RAB-Installation-Instructions,DAB-Installation-Instructions,KAB-Installation-Instructions" >> $GITHUB_OUTPUT
          else
            echo "outlines=${{ github.event.inputs.outlines }}" >> $GITHUB_OUTPUT
          fi

      - name: Gather all outlines into /crowdin_sources
        run: |
          mkdir -p crowdin_sources
          
          OUTLINE_MAPPING=$(cat outlines.json)
          IFS=',' read -ra OUTLINE_ARRAY <<< "${{ steps.outlines.outputs.outlines }}"
          
          export DOCU_NOTION_INTEGRATION_TOKEN=${{ secrets.DOCU_NOTION_INTEGRATION_TOKEN }}
          
          for outline in "${OUTLINE_ARRAY[@]}"; do
            outline_trimmed=$(echo "$outline" | xargs)
            root_page_id=$(echo "$OUTLINE_MAPPING" | jq -r --arg key "$outline_trimmed" '.[$key]')
            
            if [ "$root_page_id" = "null" ] || [ -z "$root_page_id" ]; then
              echo "No root page ID found for $outline_trimmed, skipping."
              continue
            fi
            
            echo "Pulling Notion pages for $outline_trimmed (root page: $root_page_id)"
            export DOCU_NOTION_SAMPLE_ROOT_PAGE=$root_page_id
            yarn pull
            rm -rf crowdin_sources/$outline_trimmed && mkdir crowdin_sources/$outline_trimmed        #mv will not work if there is content in the directory
            mv docs/* crowdin_sources/$outline_trimmed
          done

      - name: Sync Crowdin files
        uses: crowdin/github-action@v1
        with:
          upload_sources: true
          upload_translations: false
          download_translations: true
          crowdin_branch_name: main
        env:
          CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}
          CROWDIN_PROJECT_ID: "812428"
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      
      - name: Build and generate PDFs
        run: |
          OUTLINE_MAPPING=$(cat outlines.json)
          IFS=',' read -ra OUTLINE_ARRAY <<< "${{ steps.outlines.outputs.outlines }}"
          
          for outline in "${OUTLINE_ARRAY[@]}"; do
            outline_trimmed=$(echo "$outline" | xargs)
            group_prefix=$(echo "$outline_trimmed" | cut -d'-' -f1)
            rest_of_name=$(echo "$outline_trimmed" | cut -d'-' -f2-)
            mkdir -p pdfs/$group_prefix/$rest_of_name        #Organize pdfs here so output isn't cluttered

            npm install -g http-server wait-on
            echo 0 | sudo tee /proc/sys/kernel/apparmor_restrict_unprivileged_userns
            http-server build/ -p 3000 --silent &
            wait-on http://localhost:3000
            
            #Clean docs dir
            rm -rf docs && mkdir docs
            
            #Move files into /docs for Docusaurus
            cp -r crowdin_sources/$outline_trimmed/* docs/
            yarn build

            #For English pdf
            npx docu-pdf http://localhost:3000 --outputPath $outline_trimmed.pdf
            mv $outline_trimmed.pdf pdfs/$group_prefix/$rest_of_name/

            #Repeat for any other desired languages, translated .md files will be in the i18n directory
            rm -rf docs && mkdir docs
            cp -r i18n/es-ES/$outline_trimmed/* docs/
            yarn build
            npx docu-pdf http://localhost:3000 --outputPath es-$outline_trimmed.pdf
            mv es-$outline_trimmed.pdf pdfs/$group_prefix/$rest_of_name/

            rm -rf docs && mkdir docs
            cp -r i18n/fr-FR/$outline_trimmed/* docs/
            yarn build
            npx docu-pdf http://localhost:3000 --outputPath fr-$outline_trimmed.pdf
            mv fr-$outline_trimmed.pdf pdfs/$group_prefix/$rest_of_name/
          done

      - name: Upload PDFs
        uses: actions/upload-artifact@v4
        with:
          name: documentation-pdfs
          path: pdfs/

name: Release
on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      outlines:
        description: 'Comma-separated list of outlines to generate PDFs for (leave blank for all)'
        required: false
        default: ''
      logLevel:
        description: "Log level"
        required: false
        default: "warning"
jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
    
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: lts/*
          
      - name: Install dependencies
        run: yarn

      - name: Set outlines variable
        id: outlines
        run: |
          # (set OUTLINES as before, see earlier messages)
          # Example with three outlines:
          echo "outlines=OutlineA,OutlineB,OutlineC" >> $GITHUB_OUTPUT

      - name: Gather all outlines into /crowdin_sources
        run: |
          mkdir -p crowdin_sources  # ensure folder exists
          OUTLINE_MAPPING=$(cat outlines.json)
          IFS=',' read -ra OUTLINE_ARRAY <<< "${{ steps.outlines.outputs.outlines }}"
          export DOCU_NOTION_INTEGRATION_TOKEN=${{ secrets.DOCU_NOTION_INTEGRATION_TOKEN }}
          for outline in "${OUTLINE_ARRAY[@]}"; do
            outline_trimmed=$(echo "$outline" | xargs)
            root_page_id=$(echo "$OUTLINE_MAPPING" | jq -r --arg key "$outline_trimmed" '.[$key]')
            if [ "$root_page_id" = "null" ] || [ -z "$root_page_id" ]; then
              echo "No root page ID found for $outline_trimmed, skipping."
              continue
            fi
            # Replace the next line with however you can specify output dir
            yarn pull --output-dir crowdin_sources/$outline_trimmed
            mv docs/* crowdin_sources/$outline_trimmed
          done

      # Upload all markdown (all outlines) to Crowdin for translation
      - name: Upload sources to Crowdin
        run: npx crowdin upload sources
        env:
          CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}

      # Download translations back from Crowdin
      - name: Download translations from Crowdin
        run: npx crowdin download
        env:
          CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}

      # For *each* outline, copy to /docs, build, and generate PDF
      - name: Build and generate PDFs
        run: |
          OUTLINE_MAPPING=$(cat outlines.json)
          IFS=',' read -ra OUTLINE_ARRAY <<< "${{ steps.outlines.outputs.outlines }}"
          for outline in "${OUTLINE_ARRAY[@]}"; do
            outline_trimmed=$(echo "$outline" | xargs)
            # Clean docs dir
            rimraf ./docs/
            # Copy source or translated markdown into /docs
            # Replace en below with your locale code as desired
            cp -r crowdin_sources/$outline_trimmed/* docs/
            # Now /docs has only this outline's content
            yarn build
            npm install -g http-server wait-on
            echo 0 | sudo tee /proc/sys/kernel/apparmor_restrict_unprivileged_userns
            http-server build/ -p 3000 --silent &
            wait-on http://localhost:3000
            npx docu-pdf http://localhost:3000 --outputPath $outline_trimmed.pdf
            kill %1  # stop local server
          done

      - name: Upload PDFs
        uses: actions/upload-artifact@v4
        with:
          name: documentation-pdfs
          path: "*.pdf"
